package datastructure.树.红黑树.删除;

public class 删除 {
    /**
     * 基本思路
     * 红黑树的删除操作也包括两部分工作：一查找目标结点；而删除后自平衡。
     * 查找目标结点显然可以复用查找操作，当不存在目标结点时，忽略本次操作；
     * 当存在目标结点时，删除后就得做自平衡处理了。
     * 删除了结点后我们还需要找结点来替代删除结点的位置，不然子树跟父辈结点断开了，
     * 除非删除结点刚好没子结点，那么就不需要替代。
     *
     */
    /**
     * 二叉树删除结点找替代结点有3种情情景：
     *
     * 情景1：若删除结点无子结点，直接删除
     * 情景2：若删除结点只有一个子结点，用子结点替换删除结点
     * 情景3：若删除结点有两个子结点，用后继结点（大于删除结点的最小结点）替换删除结点
     *
     */
    /**
     * 讲一个重要的思路：删除结点被替代后，在不考虑结点的键值的情况下，对于树来说，可以认为删除的是替代结点！
     * 话很苍白，我们看图-删除p。在不看键值对的情况下，图17的红黑树最终结果是删除了Q所在位置的结点！
     * 这种思路非常重要，大大简化了后文讲解红黑树删除的情景！
     *
     *
     * 情景2：删除结点用其唯一的子结点替换，子结点替换为删除结点后，可以认为删除的是子结点，
     * 若子结点又有两个子结点，那么相当于转换为情景3，一直自顶向下转换，总是能转换为情景1。
     * （对于红黑树来说，根据性质5.1，只存在一个子结点的结点肯定在树末了）
     *
     * 情景3：删除结点用后继结点（肯定不存在左结点），如果后继结点有右子结点，
     * 那么相当于转换为情景2，否则转为为情景1。
     *
     */
}
