package datastructure.树.红黑树;

public class 红黑树概念 {
    /**
     * 二叉查找树:Binary Search Tree 「BST」
     *
     * 1.某节点的左子树节点值仅包含小于该节点值
     * 2.某节点的右子树节点值仅包含大于该节点值
     * 3.左右子树每个也必须是二叉查找树
     *
     */
    /**
     * 红黑树:Red-Black Tree 「RBT」是一个自平衡(不是绝对的平衡)的二叉查找树(BST)，
     * 树上的每个节点都遵循下面的规则:
     * 性质1：每个节点要么是黑色，要么是红色。
     * 性质2：根节点是黑色。
     * 性质3：每个叶子节点（NIL）是黑色。
     * 性质4：每个红色结点的两个子结点一定都是黑色。
     * 性质5：任意一结点到每个叶子结点的路径都包含数量相同的黑结点
     * 从性质5又可以推出：
     * 性质5.1：如果一个结点存在黑子结点，那么该结点肯定有两个子结点
     */
}
