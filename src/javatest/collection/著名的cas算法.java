package javatest.collection;

public class 著名的cas算法 {
    /**
     * 一个线程失败或挂起并不会导致其他线程也失败或挂起，那么这种算法就被称为非阻塞算法。
     * 而CAS就是一种非阻塞算法实现，也是一种乐观锁技术，它能在不使用锁的情况下实现多线程安全，所以CAS也是一种无锁算法。
     *
     * 我认为V的值应该为A，如果是，那么将V的值更新为B，否则不修改并告诉V的值实际为多少”
     *
     *
     * CAS虽然很高效的解决了原子操作问题，但是CAS仍然存在三大问题。
     *
     * 【1】自旋消耗。
     *
     *     当某一方法比如：getAndAddInt执行时，如果CAS失败，会一直进行尝试。如果CAS长时间尝试但是一直不成功，
     *     可能会给CPU带来很大的开销。
     *
     *     破坏掉for死循环，当超过一定时间或者一定次数时，return退出
     *
     * 【2】只能保证一个共享变量的原子操作。
     *
     *     当操作1个共享变量时，我们可以使用循环CAS的方式来保证原子操作，但是操作多个共享变量时，
     *     循环CAS就无法保证操作的原子性，这个时候就需要用锁来保证原子性。
     *
     *     CAS操作是针对一个变量的，如果对多个变量操作，1. 可以加锁来解决。2 .封装成对象类解决。
     *
     * 【3】存在ABA问题
     */
}
