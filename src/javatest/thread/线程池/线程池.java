package javatest.thread.线程池;

public class 线程池 {
    /**
     * 什么是线程池？
     *
     * 线程池是一种多线程处理形式，处理过程中将任务提交到线程池，任务的执行交由线程池来管理。
     * 如果每个请求都创建一个线程去处理，那么服务器的资源很快就会被耗尽，使用线程池可以减少创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。
     *
     *
     *
     * 为什么要使用线程池？
     *
     * 创建线程和销毁线程的花销是比较大的，这些时间有可能比处理业务的时间还要长。这样频繁的创建线程和销毁线程，再加上业务工作线程，
     * 消耗系统资源的时间，可能导致系统资源不足。（我们可以把创建和销毁的线程的过程去掉）
     */
    /**
     * 线程池的工作流程
     *
     *     第一步便是我们将我们的任务提交给线程池
     *     如果线程池中线程数小于核心线程数，则创建一个新的线程来执行该任务。
     *     提交任务时，线程池中的空闲的线程数为0并且线程数等于核心线程数，则观察线程池中的任务队列是否已满，如果未满则将任务添加到任务队列，否则进入步骤4
     *     如果最大线程数大于核心线程数，并且总线程数小于最大线程数，则创建一个新的线程来执行该任务。否则进入步骤5
     *     当任务队列已满时，就执行拒绝策略
     */
    /**
     * 线程池的核心参数:
     *
     * corePoolSize（核心线程数），这几个核心线程，只是在没有用的时候，也不会被回收
     * queueCapacity（任务队列容量）
     *
     * maxPoolSize（最大线程数）就是线程池中可以容纳的最大线程的数量
     *
     * keepAliveTime（线程空闲时间），就是线程池中除了核心线程之外的其他的最长可以保留的时间，因为在线程池中，除了核心线程即使在无任务的情况下也不能被清除，
     * 其余的都是有存活时间的，意思就是非核心线程可以保留的最长的空闲时间，
     *
     * allowCoreThreadTimeout（允许核心线程超时）
     *
     * rejectedExecutionHandler（任务拒绝处理器）是一种拒绝策略，我们可以在任务满了之后，拒绝执行某些任务。
     *
     * workQueue（BlockingQueue 任务队列，一种阻塞队列）
     */
}
