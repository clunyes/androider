package design_pattern.structural_design_pattern.proxy;
/**
 * 提供了对目标对象另外的访问方式;即通过代理对象访问目标对象.
 * 这样做的好处是:可以在目标对象实现的基础上,增强额外的功能操作,即扩展目标对象的功能.
 */
/**
 * 总结
 * 主要应用：Spring AOP、日志、用户鉴权、Hibernate数据查询、测试框架的后端mock、RPC远程调用、
 * Java注解对象获取、全局性异常处理、性能监控，甚至事务处理等。
 * 代理模式角色：主要分为调用方、代理对象，业务对象、抽象接口
 * • 抽象接口：定义对外提供的方法（功能）。
 * • 业务对象：实现抽象接口所定义的具体功能。
 * • 代理对象：实现抽象接口，封装业务对象，控制对象的访问，并提供给调用方使用。
 * 代理模式的优点：
 * • 可以使真是角色的操作更纯粹，不用去关注一些公共业务
 * • 公共业务就交给代理角色，实现了业务的分工
 * • 公共业务发生扩展的时候，方便集中管理
 * 缺点：
 * • 一个真实角色就会产生一个代理角色，代码量会翻倍
 */

/**
 * 1. 装饰器模式强调的是增强自身，在被装饰之后你能够在被增强的类上使用增强后的功能。增强后你还是你，只不过能力更强了而已；
 * 代理模式强调要让别人帮你去做一些本身与你业务没有太多关系的职责（记录日志、设置缓存）。
 * 代理模式是为了实现对象的控制，因为被代理的对象往往难以直接获得或者是其内部不想暴露出来。
 * 2. 装饰模式是为装饰的对象增强功能；而代理模式对代理的对象施加控制，但不对对象本身的功能进行增强；
 *
 */
